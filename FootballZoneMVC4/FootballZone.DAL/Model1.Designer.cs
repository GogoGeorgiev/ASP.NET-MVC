//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("FootballZoneModel", "FK_CoachesTeams_Teams", "Teams", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(FootballZoneMVC4.DAL.Team), "CoachesTeams", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(FootballZoneMVC4.DAL.CoachesTeam), true)]
[assembly: EdmRelationshipAttribute("FootballZoneModel", "FK_Teams_Countries", "Countries", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(FootballZoneMVC4.DAL.Country), "Teams", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(FootballZoneMVC4.DAL.Team), true)]
[assembly: EdmRelationshipAttribute("FootballZoneModel", "FK_FootballMatches_Teams", "Teams", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(FootballZoneMVC4.DAL.Team), "FootballMatches", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(FootballZoneMVC4.DAL.FootballMatch), true)]
[assembly: EdmRelationshipAttribute("FootballZoneModel", "FK_FootballMatches_Teams1", "Teams", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(FootballZoneMVC4.DAL.Team), "FootballMatches", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(FootballZoneMVC4.DAL.FootballMatch), true)]
[assembly: EdmRelationshipAttribute("FootballZoneModel", "FK_RefereesMatches_FootballMatches", "FootballMatches", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(FootballZoneMVC4.DAL.FootballMatch), "RefereesMatches", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(FootballZoneMVC4.DAL.RefereesMatch), true)]
[assembly: EdmRelationshipAttribute("FootballZoneModel", "FK_OwnersTeams_Teams", "Teams", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(FootballZoneMVC4.DAL.Team), "OwnersTeams", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(FootballZoneMVC4.DAL.OwnersTeam), true)]
[assembly: EdmRelationshipAttribute("FootballZoneModel", "FK_PlayersTeams_Teams", "Teams", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(FootballZoneMVC4.DAL.Team), "PlayersTeams", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(FootballZoneMVC4.DAL.PlayersTeam), true)]
[assembly: EdmRelationshipAttribute("FootballZoneModel", "FK_RefereesMatches_Referees", "Referees", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(FootballZoneMVC4.DAL.Referee), "RefereesMatches", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(FootballZoneMVC4.DAL.RefereesMatch), true)]
[assembly: EdmRelationshipAttribute("FootballZoneModel", "FK_SponsorsTeams_Teams", "Teams", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(FootballZoneMVC4.DAL.Team), "SponsorsTeams", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(FootballZoneMVC4.DAL.SponsorsTeam), true)]
[assembly: EdmRelationshipAttribute("FootballZoneModel", "FK_StadiumsTeams_Stadiums", "Stadiums", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(FootballZoneMVC4.DAL.Stadium), "StadiumsTeams", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(FootballZoneMVC4.DAL.StadiumsTeam), true)]
[assembly: EdmRelationshipAttribute("FootballZoneModel", "FK_StadiumsTeams_Teams", "Teams", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(FootballZoneMVC4.DAL.Team), "StadiumsTeams", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(FootballZoneMVC4.DAL.StadiumsTeam), true)]
[assembly: EdmRelationshipAttribute("FootballZoneModel", "FK_SponsorsTeams_Sponsors", "Sponsor", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(FootballZoneMVC4.DAL.Sponsor), "SponsorsTeam", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(FootballZoneMVC4.DAL.SponsorsTeam), true)]
[assembly: EdmRelationshipAttribute("FootballZoneModel", "FK_PlayersTeams_Players", "Player", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(FootballZoneMVC4.DAL.Player), "PlayersTeam", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(FootballZoneMVC4.DAL.PlayersTeam), true)]
[assembly: EdmRelationshipAttribute("FootballZoneModel", "FK_Tournaments_FootballAssociations", "FootballAssociation", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(FootballZoneMVC4.DAL.FootballAssociation), "Tournament", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(FootballZoneMVC4.DAL.Tournament), true)]
[assembly: EdmRelationshipAttribute("FootballZoneModel", "FK_FootballMatches_Tournaments", "Tournament", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(FootballZoneMVC4.DAL.Tournament), "FootballMatch", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(FootballZoneMVC4.DAL.FootballMatch), true)]
[assembly: EdmRelationshipAttribute("FootballZoneModel", "FK_CoachesTeams_Coaches", "Coach", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(FootballZoneMVC4.DAL.Coach), "CoachesTeam", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(FootballZoneMVC4.DAL.CoachesTeam), true)]
[assembly: EdmRelationshipAttribute("FootballZoneModel", "FK_OwnersTeams_Owners", "Owner", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(FootballZoneMVC4.DAL.Owner), "OwnersTeam", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(FootballZoneMVC4.DAL.OwnersTeam), true)]

#endregion

namespace FootballZoneMVC4.DAL
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class FootballZoneMVC4Entities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new FootballZoneMVC4Entities object using the connection string found in the 'FootballZoneMVC4Entities' section of the application configuration file.
        /// </summary>
        public FootballZoneMVC4Entities() : base("name=FootballZoneMVC4Entities", "FootballZoneMVC4Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new FootballZoneMVC4Entities object.
        /// </summary>
        public FootballZoneMVC4Entities(string connectionString) : base(connectionString, "FootballZoneMVC4Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new FootballZoneMVC4Entities object.
        /// </summary>
        public FootballZoneMVC4Entities(EntityConnection connection) : base(connection, "FootballZoneMVC4Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CoachesTeam> CoachesTeams
        {
            get
            {
                if ((_CoachesTeams == null))
                {
                    _CoachesTeams = base.CreateObjectSet<CoachesTeam>("CoachesTeams");
                }
                return _CoachesTeams;
            }
        }
        private ObjectSet<CoachesTeam> _CoachesTeams;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Country> Countries
        {
            get
            {
                if ((_Countries == null))
                {
                    _Countries = base.CreateObjectSet<Country>("Countries");
                }
                return _Countries;
            }
        }
        private ObjectSet<Country> _Countries;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<FootballMatch> FootballMatches
        {
            get
            {
                if ((_FootballMatches == null))
                {
                    _FootballMatches = base.CreateObjectSet<FootballMatch>("FootballMatches");
                }
                return _FootballMatches;
            }
        }
        private ObjectSet<FootballMatch> _FootballMatches;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<OwnersTeam> OwnersTeams
        {
            get
            {
                if ((_OwnersTeams == null))
                {
                    _OwnersTeams = base.CreateObjectSet<OwnersTeam>("OwnersTeams");
                }
                return _OwnersTeams;
            }
        }
        private ObjectSet<OwnersTeam> _OwnersTeams;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PlayersTeam> PlayersTeams
        {
            get
            {
                if ((_PlayersTeams == null))
                {
                    _PlayersTeams = base.CreateObjectSet<PlayersTeam>("PlayersTeams");
                }
                return _PlayersTeams;
            }
        }
        private ObjectSet<PlayersTeam> _PlayersTeams;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Referee> Referees
        {
            get
            {
                if ((_Referees == null))
                {
                    _Referees = base.CreateObjectSet<Referee>("Referees");
                }
                return _Referees;
            }
        }
        private ObjectSet<Referee> _Referees;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RefereesMatch> RefereesMatches
        {
            get
            {
                if ((_RefereesMatches == null))
                {
                    _RefereesMatches = base.CreateObjectSet<RefereesMatch>("RefereesMatches");
                }
                return _RefereesMatches;
            }
        }
        private ObjectSet<RefereesMatch> _RefereesMatches;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SponsorsTeam> SponsorsTeams
        {
            get
            {
                if ((_SponsorsTeams == null))
                {
                    _SponsorsTeams = base.CreateObjectSet<SponsorsTeam>("SponsorsTeams");
                }
                return _SponsorsTeams;
            }
        }
        private ObjectSet<SponsorsTeam> _SponsorsTeams;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Stadium> Stadiums
        {
            get
            {
                if ((_Stadiums == null))
                {
                    _Stadiums = base.CreateObjectSet<Stadium>("Stadiums");
                }
                return _Stadiums;
            }
        }
        private ObjectSet<Stadium> _Stadiums;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<StadiumsTeam> StadiumsTeams
        {
            get
            {
                if ((_StadiumsTeams == null))
                {
                    _StadiumsTeams = base.CreateObjectSet<StadiumsTeam>("StadiumsTeams");
                }
                return _StadiumsTeams;
            }
        }
        private ObjectSet<StadiumsTeam> _StadiumsTeams;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Team> Teams
        {
            get
            {
                if ((_Teams == null))
                {
                    _Teams = base.CreateObjectSet<Team>("Teams");
                }
                return _Teams;
            }
        }
        private ObjectSet<Team> _Teams;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Sponsor> Sponsors
        {
            get
            {
                if ((_Sponsors == null))
                {
                    _Sponsors = base.CreateObjectSet<Sponsor>("Sponsors");
                }
                return _Sponsors;
            }
        }
        private ObjectSet<Sponsor> _Sponsors;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<FootballAssociation> FootballAssociations
        {
            get
            {
                if ((_FootballAssociations == null))
                {
                    _FootballAssociations = base.CreateObjectSet<FootballAssociation>("FootballAssociations");
                }
                return _FootballAssociations;
            }
        }
        private ObjectSet<FootballAssociation> _FootballAssociations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Player> Players
        {
            get
            {
                if ((_Players == null))
                {
                    _Players = base.CreateObjectSet<Player>("Players");
                }
                return _Players;
            }
        }
        private ObjectSet<Player> _Players;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Tournament> Tournaments
        {
            get
            {
                if ((_Tournaments == null))
                {
                    _Tournaments = base.CreateObjectSet<Tournament>("Tournaments");
                }
                return _Tournaments;
            }
        }
        private ObjectSet<Tournament> _Tournaments;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Coach> Coaches
        {
            get
            {
                if ((_Coaches == null))
                {
                    _Coaches = base.CreateObjectSet<Coach>("Coaches");
                }
                return _Coaches;
            }
        }
        private ObjectSet<Coach> _Coaches;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Owner> Owners
        {
            get
            {
                if ((_Owners == null))
                {
                    _Owners = base.CreateObjectSet<Owner>("Owners");
                }
                return _Owners;
            }
        }
        private ObjectSet<Owner> _Owners;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CoachesTeams EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCoachesTeams(CoachesTeam coachesTeam)
        {
            base.AddObject("CoachesTeams", coachesTeam);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Countries EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCountries(Country country)
        {
            base.AddObject("Countries", country);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the FootballMatches EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFootballMatches(FootballMatch footballMatch)
        {
            base.AddObject("FootballMatches", footballMatch);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the OwnersTeams EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToOwnersTeams(OwnersTeam ownersTeam)
        {
            base.AddObject("OwnersTeams", ownersTeam);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PlayersTeams EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPlayersTeams(PlayersTeam playersTeam)
        {
            base.AddObject("PlayersTeams", playersTeam);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Referees EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToReferees(Referee referee)
        {
            base.AddObject("Referees", referee);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RefereesMatches EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRefereesMatches(RefereesMatch refereesMatch)
        {
            base.AddObject("RefereesMatches", refereesMatch);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SponsorsTeams EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSponsorsTeams(SponsorsTeam sponsorsTeam)
        {
            base.AddObject("SponsorsTeams", sponsorsTeam);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Stadiums EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToStadiums(Stadium stadium)
        {
            base.AddObject("Stadiums", stadium);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the StadiumsTeams EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToStadiumsTeams(StadiumsTeam stadiumsTeam)
        {
            base.AddObject("StadiumsTeams", stadiumsTeam);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Teams EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTeams(Team team)
        {
            base.AddObject("Teams", team);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Sponsors EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSponsors(Sponsor sponsor)
        {
            base.AddObject("Sponsors", sponsor);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the FootballAssociations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFootballAssociations(FootballAssociation footballAssociation)
        {
            base.AddObject("FootballAssociations", footballAssociation);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Players EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPlayers(Player player)
        {
            base.AddObject("Players", player);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Tournaments EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTournaments(Tournament tournament)
        {
            base.AddObject("Tournaments", tournament);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Coaches EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCoaches(Coach coach)
        {
            base.AddObject("Coaches", coach);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Owners EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToOwners(Owner owner)
        {
            base.AddObject("Owners", owner);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="FootballZoneModel", Name="Coach")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Coach : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Coach object.
        /// </summary>
        /// <param name="coachID">Initial value of the CoachID property.</param>
        /// <param name="coachNames">Initial value of the CoachNames property.</param>
        public static Coach CreateCoach(global::System.Int32 coachID, global::System.String coachNames)
        {
            Coach coach = new Coach();
            coach.CoachID = coachID;
            coach.CoachNames = coachNames;
            return coach;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CoachID
        {
            get
            {
                return _CoachID;
            }
            set
            {
                if (_CoachID != value)
                {
                    OnCoachIDChanging(value);
                    ReportPropertyChanging("CoachID");
                    _CoachID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CoachID");
                    OnCoachIDChanged();
                }
            }
        }
        private global::System.Int32 _CoachID;
        partial void OnCoachIDChanging(global::System.Int32 value);
        partial void OnCoachIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CoachNames
        {
            get
            {
                return _CoachNames;
            }
            set
            {
                OnCoachNamesChanging(value);
                ReportPropertyChanging("CoachNames");
                _CoachNames = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CoachNames");
                OnCoachNamesChanged();
            }
        }
        private global::System.String _CoachNames;
        partial void OnCoachNamesChanging(global::System.String value);
        partial void OnCoachNamesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Biography
        {
            get
            {
                return _Biography;
            }
            set
            {
                OnBiographyChanging(value);
                ReportPropertyChanging("Biography");
                _Biography = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Biography");
                OnBiographyChanged();
            }
        }
        private global::System.String _Biography;
        partial void OnBiographyChanging(global::System.String value);
        partial void OnBiographyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ImageUrl
        {
            get
            {
                return _ImageUrl;
            }
            set
            {
                OnImageUrlChanging(value);
                ReportPropertyChanging("ImageUrl");
                _ImageUrl = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ImageUrl");
                OnImageUrlChanged();
            }
        }
        private global::System.String _ImageUrl;
        partial void OnImageUrlChanging(global::System.String value);
        partial void OnImageUrlChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_CoachesTeams_Coaches", "CoachesTeam")]
        public EntityCollection<CoachesTeam> CoachesTeams
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CoachesTeam>("FootballZoneModel.FK_CoachesTeams_Coaches", "CoachesTeam");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CoachesTeam>("FootballZoneModel.FK_CoachesTeams_Coaches", "CoachesTeam", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="FootballZoneModel", Name="CoachesTeam")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CoachesTeam : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CoachesTeam object.
        /// </summary>
        /// <param name="coachID">Initial value of the CoachID property.</param>
        /// <param name="teamID">Initial value of the TeamID property.</param>
        /// <param name="fromDate">Initial value of the FromDate property.</param>
        public static CoachesTeam CreateCoachesTeam(global::System.Int32 coachID, global::System.Int32 teamID, global::System.DateTime fromDate)
        {
            CoachesTeam coachesTeam = new CoachesTeam();
            coachesTeam.CoachID = coachID;
            coachesTeam.TeamID = teamID;
            coachesTeam.FromDate = fromDate;
            return coachesTeam;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CoachID
        {
            get
            {
                return _CoachID;
            }
            set
            {
                if (_CoachID != value)
                {
                    OnCoachIDChanging(value);
                    ReportPropertyChanging("CoachID");
                    _CoachID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CoachID");
                    OnCoachIDChanged();
                }
            }
        }
        private global::System.Int32 _CoachID;
        partial void OnCoachIDChanging(global::System.Int32 value);
        partial void OnCoachIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TeamID
        {
            get
            {
                return _TeamID;
            }
            set
            {
                if (_TeamID != value)
                {
                    OnTeamIDChanging(value);
                    ReportPropertyChanging("TeamID");
                    _TeamID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TeamID");
                    OnTeamIDChanged();
                }
            }
        }
        private global::System.Int32 _TeamID;
        partial void OnTeamIDChanging(global::System.Int32 value);
        partial void OnTeamIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime FromDate
        {
            get
            {
                return _FromDate;
            }
            set
            {
                OnFromDateChanging(value);
                ReportPropertyChanging("FromDate");
                _FromDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FromDate");
                OnFromDateChanged();
            }
        }
        private global::System.DateTime _FromDate;
        partial void OnFromDateChanging(global::System.DateTime value);
        partial void OnFromDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ToDate
        {
            get
            {
                return _ToDate;
            }
            set
            {
                OnToDateChanging(value);
                ReportPropertyChanging("ToDate");
                _ToDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ToDate");
                OnToDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _ToDate;
        partial void OnToDateChanging(Nullable<global::System.DateTime> value);
        partial void OnToDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CoachKind
        {
            get
            {
                return _CoachKind;
            }
            set
            {
                OnCoachKindChanging(value);
                ReportPropertyChanging("CoachKind");
                _CoachKind = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CoachKind");
                OnCoachKindChanged();
            }
        }
        private global::System.String _CoachKind;
        partial void OnCoachKindChanging(global::System.String value);
        partial void OnCoachKindChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_CoachesTeams_Teams", "Teams")]
        public Team Team
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("FootballZoneModel.FK_CoachesTeams_Teams", "Teams").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("FootballZoneModel.FK_CoachesTeams_Teams", "Teams").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Team> TeamReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("FootballZoneModel.FK_CoachesTeams_Teams", "Teams");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Team>("FootballZoneModel.FK_CoachesTeams_Teams", "Teams", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_CoachesTeams_Coaches", "Coach")]
        public Coach Coach
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Coach>("FootballZoneModel.FK_CoachesTeams_Coaches", "Coach").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Coach>("FootballZoneModel.FK_CoachesTeams_Coaches", "Coach").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Coach> CoachReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Coach>("FootballZoneModel.FK_CoachesTeams_Coaches", "Coach");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Coach>("FootballZoneModel.FK_CoachesTeams_Coaches", "Coach", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="FootballZoneModel", Name="Country")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Country : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Country object.
        /// </summary>
        /// <param name="countryID">Initial value of the CountryID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Country CreateCountry(global::System.Int32 countryID, global::System.String name)
        {
            Country country = new Country();
            country.CountryID = countryID;
            country.Name = name;
            return country;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CountryID
        {
            get
            {
                return _CountryID;
            }
            set
            {
                if (_CountryID != value)
                {
                    OnCountryIDChanging(value);
                    ReportPropertyChanging("CountryID");
                    _CountryID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CountryID");
                    OnCountryIDChanged();
                }
            }
        }
        private global::System.Int32 _CountryID;
        partial void OnCountryIDChanging(global::System.Int32 value);
        partial void OnCountryIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ImageUrl
        {
            get
            {
                return _ImageUrl;
            }
            set
            {
                OnImageUrlChanging(value);
                ReportPropertyChanging("ImageUrl");
                _ImageUrl = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ImageUrl");
                OnImageUrlChanged();
            }
        }
        private global::System.String _ImageUrl;
        partial void OnImageUrlChanging(global::System.String value);
        partial void OnImageUrlChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_Teams_Countries", "Teams")]
        public EntityCollection<Team> Teams
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Team>("FootballZoneModel.FK_Teams_Countries", "Teams");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Team>("FootballZoneModel.FK_Teams_Countries", "Teams", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="FootballZoneModel", Name="FootballAssociation")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class FootballAssociation : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new FootballAssociation object.
        /// </summary>
        /// <param name="associationID">Initial value of the AssociationID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static FootballAssociation CreateFootballAssociation(global::System.Int32 associationID, global::System.String name)
        {
            FootballAssociation footballAssociation = new FootballAssociation();
            footballAssociation.AssociationID = associationID;
            footballAssociation.Name = name;
            return footballAssociation;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 AssociationID
        {
            get
            {
                return _AssociationID;
            }
            set
            {
                if (_AssociationID != value)
                {
                    OnAssociationIDChanging(value);
                    ReportPropertyChanging("AssociationID");
                    _AssociationID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AssociationID");
                    OnAssociationIDChanged();
                }
            }
        }
        private global::System.Int32 _AssociationID;
        partial void OnAssociationIDChanging(global::System.Int32 value);
        partial void OnAssociationIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Information
        {
            get
            {
                return _Information;
            }
            set
            {
                OnInformationChanging(value);
                ReportPropertyChanging("Information");
                _Information = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Information");
                OnInformationChanged();
            }
        }
        private global::System.String _Information;
        partial void OnInformationChanging(global::System.String value);
        partial void OnInformationChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ImageUrl
        {
            get
            {
                return _ImageUrl;
            }
            set
            {
                OnImageUrlChanging(value);
                ReportPropertyChanging("ImageUrl");
                _ImageUrl = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ImageUrl");
                OnImageUrlChanged();
            }
        }
        private global::System.String _ImageUrl;
        partial void OnImageUrlChanging(global::System.String value);
        partial void OnImageUrlChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_Tournaments_FootballAssociations", "Tournament")]
        public EntityCollection<Tournament> Tournaments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Tournament>("FootballZoneModel.FK_Tournaments_FootballAssociations", "Tournament");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Tournament>("FootballZoneModel.FK_Tournaments_FootballAssociations", "Tournament", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="FootballZoneModel", Name="FootballMatch")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class FootballMatch : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new FootballMatch object.
        /// </summary>
        /// <param name="matchID">Initial value of the MatchID property.</param>
        /// <param name="tournamentID">Initial value of the TournamentID property.</param>
        /// <param name="teamA">Initial value of the TeamA property.</param>
        /// <param name="teamB">Initial value of the TeamB property.</param>
        /// <param name="finalScore">Initial value of the FinalScore property.</param>
        /// <param name="matchDate">Initial value of the MatchDate property.</param>
        public static FootballMatch CreateFootballMatch(global::System.Int32 matchID, global::System.Int32 tournamentID, global::System.Int32 teamA, global::System.Int32 teamB, global::System.String finalScore, global::System.DateTime matchDate)
        {
            FootballMatch footballMatch = new FootballMatch();
            footballMatch.MatchID = matchID;
            footballMatch.TournamentID = tournamentID;
            footballMatch.TeamA = teamA;
            footballMatch.TeamB = teamB;
            footballMatch.FinalScore = finalScore;
            footballMatch.MatchDate = matchDate;
            return footballMatch;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MatchID
        {
            get
            {
                return _MatchID;
            }
            set
            {
                if (_MatchID != value)
                {
                    OnMatchIDChanging(value);
                    ReportPropertyChanging("MatchID");
                    _MatchID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("MatchID");
                    OnMatchIDChanged();
                }
            }
        }
        private global::System.Int32 _MatchID;
        partial void OnMatchIDChanging(global::System.Int32 value);
        partial void OnMatchIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TournamentID
        {
            get
            {
                return _TournamentID;
            }
            set
            {
                OnTournamentIDChanging(value);
                ReportPropertyChanging("TournamentID");
                _TournamentID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TournamentID");
                OnTournamentIDChanged();
            }
        }
        private global::System.Int32 _TournamentID;
        partial void OnTournamentIDChanging(global::System.Int32 value);
        partial void OnTournamentIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TeamA
        {
            get
            {
                return _TeamA;
            }
            set
            {
                OnTeamAChanging(value);
                ReportPropertyChanging("TeamA");
                _TeamA = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TeamA");
                OnTeamAChanged();
            }
        }
        private global::System.Int32 _TeamA;
        partial void OnTeamAChanging(global::System.Int32 value);
        partial void OnTeamAChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TeamB
        {
            get
            {
                return _TeamB;
            }
            set
            {
                OnTeamBChanging(value);
                ReportPropertyChanging("TeamB");
                _TeamB = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TeamB");
                OnTeamBChanged();
            }
        }
        private global::System.Int32 _TeamB;
        partial void OnTeamBChanging(global::System.Int32 value);
        partial void OnTeamBChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FinalScore
        {
            get
            {
                return _FinalScore;
            }
            set
            {
                OnFinalScoreChanging(value);
                ReportPropertyChanging("FinalScore");
                _FinalScore = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FinalScore");
                OnFinalScoreChanged();
            }
        }
        private global::System.String _FinalScore;
        partial void OnFinalScoreChanging(global::System.String value);
        partial void OnFinalScoreChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime MatchDate
        {
            get
            {
                return _MatchDate;
            }
            set
            {
                OnMatchDateChanging(value);
                ReportPropertyChanging("MatchDate");
                _MatchDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MatchDate");
                OnMatchDateChanged();
            }
        }
        private global::System.DateTime _MatchDate;
        partial void OnMatchDateChanging(global::System.DateTime value);
        partial void OnMatchDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Information
        {
            get
            {
                return _Information;
            }
            set
            {
                OnInformationChanging(value);
                ReportPropertyChanging("Information");
                _Information = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Information");
                OnInformationChanged();
            }
        }
        private global::System.String _Information;
        partial void OnInformationChanging(global::System.String value);
        partial void OnInformationChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_FootballMatches_Teams", "Teams")]
        public Team Team
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("FootballZoneModel.FK_FootballMatches_Teams", "Teams").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("FootballZoneModel.FK_FootballMatches_Teams", "Teams").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Team> TeamReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("FootballZoneModel.FK_FootballMatches_Teams", "Teams");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Team>("FootballZoneModel.FK_FootballMatches_Teams", "Teams", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_FootballMatches_Teams1", "Teams")]
        public Team Team1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("FootballZoneModel.FK_FootballMatches_Teams1", "Teams").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("FootballZoneModel.FK_FootballMatches_Teams1", "Teams").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Team> Team1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("FootballZoneModel.FK_FootballMatches_Teams1", "Teams");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Team>("FootballZoneModel.FK_FootballMatches_Teams1", "Teams", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_RefereesMatches_FootballMatches", "RefereesMatches")]
        public EntityCollection<RefereesMatch> RefereesMatches
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RefereesMatch>("FootballZoneModel.FK_RefereesMatches_FootballMatches", "RefereesMatches");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RefereesMatch>("FootballZoneModel.FK_RefereesMatches_FootballMatches", "RefereesMatches", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_FootballMatches_Tournaments", "Tournament")]
        public Tournament Tournament
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Tournament>("FootballZoneModel.FK_FootballMatches_Tournaments", "Tournament").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Tournament>("FootballZoneModel.FK_FootballMatches_Tournaments", "Tournament").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Tournament> TournamentReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Tournament>("FootballZoneModel.FK_FootballMatches_Tournaments", "Tournament");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Tournament>("FootballZoneModel.FK_FootballMatches_Tournaments", "Tournament", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="FootballZoneModel", Name="Owner")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Owner : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Owner object.
        /// </summary>
        /// <param name="ownerID">Initial value of the OwnerID property.</param>
        /// <param name="ownerNames">Initial value of the OwnerNames property.</param>
        public static Owner CreateOwner(global::System.Int32 ownerID, global::System.String ownerNames)
        {
            Owner owner = new Owner();
            owner.OwnerID = ownerID;
            owner.OwnerNames = ownerNames;
            return owner;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 OwnerID
        {
            get
            {
                return _OwnerID;
            }
            set
            {
                if (_OwnerID != value)
                {
                    OnOwnerIDChanging(value);
                    ReportPropertyChanging("OwnerID");
                    _OwnerID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("OwnerID");
                    OnOwnerIDChanged();
                }
            }
        }
        private global::System.Int32 _OwnerID;
        partial void OnOwnerIDChanging(global::System.Int32 value);
        partial void OnOwnerIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String OwnerNames
        {
            get
            {
                return _OwnerNames;
            }
            set
            {
                OnOwnerNamesChanging(value);
                ReportPropertyChanging("OwnerNames");
                _OwnerNames = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("OwnerNames");
                OnOwnerNamesChanged();
            }
        }
        private global::System.String _OwnerNames;
        partial void OnOwnerNamesChanging(global::System.String value);
        partial void OnOwnerNamesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Biography
        {
            get
            {
                return _Biography;
            }
            set
            {
                OnBiographyChanging(value);
                ReportPropertyChanging("Biography");
                _Biography = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Biography");
                OnBiographyChanged();
            }
        }
        private global::System.String _Biography;
        partial void OnBiographyChanging(global::System.String value);
        partial void OnBiographyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ImageUrl
        {
            get
            {
                return _ImageUrl;
            }
            set
            {
                OnImageUrlChanging(value);
                ReportPropertyChanging("ImageUrl");
                _ImageUrl = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ImageUrl");
                OnImageUrlChanged();
            }
        }
        private global::System.String _ImageUrl;
        partial void OnImageUrlChanging(global::System.String value);
        partial void OnImageUrlChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_OwnersTeams_Owners", "OwnersTeam")]
        public EntityCollection<OwnersTeam> OwnersTeams
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<OwnersTeam>("FootballZoneModel.FK_OwnersTeams_Owners", "OwnersTeam");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<OwnersTeam>("FootballZoneModel.FK_OwnersTeams_Owners", "OwnersTeam", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="FootballZoneModel", Name="OwnersTeam")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class OwnersTeam : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new OwnersTeam object.
        /// </summary>
        /// <param name="ownerID">Initial value of the OwnerID property.</param>
        /// <param name="teamID">Initial value of the TeamID property.</param>
        /// <param name="fromDate">Initial value of the FromDate property.</param>
        public static OwnersTeam CreateOwnersTeam(global::System.Int32 ownerID, global::System.Int32 teamID, global::System.DateTime fromDate)
        {
            OwnersTeam ownersTeam = new OwnersTeam();
            ownersTeam.OwnerID = ownerID;
            ownersTeam.TeamID = teamID;
            ownersTeam.FromDate = fromDate;
            return ownersTeam;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 OwnerID
        {
            get
            {
                return _OwnerID;
            }
            set
            {
                if (_OwnerID != value)
                {
                    OnOwnerIDChanging(value);
                    ReportPropertyChanging("OwnerID");
                    _OwnerID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("OwnerID");
                    OnOwnerIDChanged();
                }
            }
        }
        private global::System.Int32 _OwnerID;
        partial void OnOwnerIDChanging(global::System.Int32 value);
        partial void OnOwnerIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TeamID
        {
            get
            {
                return _TeamID;
            }
            set
            {
                if (_TeamID != value)
                {
                    OnTeamIDChanging(value);
                    ReportPropertyChanging("TeamID");
                    _TeamID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TeamID");
                    OnTeamIDChanged();
                }
            }
        }
        private global::System.Int32 _TeamID;
        partial void OnTeamIDChanging(global::System.Int32 value);
        partial void OnTeamIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime FromDate
        {
            get
            {
                return _FromDate;
            }
            set
            {
                OnFromDateChanging(value);
                ReportPropertyChanging("FromDate");
                _FromDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FromDate");
                OnFromDateChanged();
            }
        }
        private global::System.DateTime _FromDate;
        partial void OnFromDateChanging(global::System.DateTime value);
        partial void OnFromDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ToDate
        {
            get
            {
                return _ToDate;
            }
            set
            {
                OnToDateChanging(value);
                ReportPropertyChanging("ToDate");
                _ToDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ToDate");
                OnToDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _ToDate;
        partial void OnToDateChanging(Nullable<global::System.DateTime> value);
        partial void OnToDateChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_OwnersTeams_Teams", "Teams")]
        public Team Team
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("FootballZoneModel.FK_OwnersTeams_Teams", "Teams").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("FootballZoneModel.FK_OwnersTeams_Teams", "Teams").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Team> TeamReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("FootballZoneModel.FK_OwnersTeams_Teams", "Teams");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Team>("FootballZoneModel.FK_OwnersTeams_Teams", "Teams", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_OwnersTeams_Owners", "Owner")]
        public Owner Owner
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Owner>("FootballZoneModel.FK_OwnersTeams_Owners", "Owner").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Owner>("FootballZoneModel.FK_OwnersTeams_Owners", "Owner").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Owner> OwnerReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Owner>("FootballZoneModel.FK_OwnersTeams_Owners", "Owner");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Owner>("FootballZoneModel.FK_OwnersTeams_Owners", "Owner", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="FootballZoneModel", Name="Player")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Player : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Player object.
        /// </summary>
        /// <param name="playerID">Initial value of the PlayerID property.</param>
        public static Player CreatePlayer(global::System.Int32 playerID)
        {
            Player player = new Player();
            player.PlayerID = playerID;
            return player;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PlayerID
        {
            get
            {
                return _PlayerID;
            }
            set
            {
                if (_PlayerID != value)
                {
                    OnPlayerIDChanging(value);
                    ReportPropertyChanging("PlayerID");
                    _PlayerID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PlayerID");
                    OnPlayerIDChanged();
                }
            }
        }
        private global::System.Int32 _PlayerID;
        partial void OnPlayerIDChanging(global::System.Int32 value);
        partial void OnPlayerIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PlayerNames
        {
            get
            {
                return _PlayerNames;
            }
            set
            {
                OnPlayerNamesChanging(value);
                ReportPropertyChanging("PlayerNames");
                _PlayerNames = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PlayerNames");
                OnPlayerNamesChanged();
            }
        }
        private global::System.String _PlayerNames;
        partial void OnPlayerNamesChanging(global::System.String value);
        partial void OnPlayerNamesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Biography
        {
            get
            {
                return _Biography;
            }
            set
            {
                OnBiographyChanging(value);
                ReportPropertyChanging("Biography");
                _Biography = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Biography");
                OnBiographyChanged();
            }
        }
        private global::System.String _Biography;
        partial void OnBiographyChanging(global::System.String value);
        partial void OnBiographyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ImageUrl
        {
            get
            {
                return _ImageUrl;
            }
            set
            {
                OnImageUrlChanging(value);
                ReportPropertyChanging("ImageUrl");
                _ImageUrl = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ImageUrl");
                OnImageUrlChanged();
            }
        }
        private global::System.String _ImageUrl;
        partial void OnImageUrlChanging(global::System.String value);
        partial void OnImageUrlChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_PlayersTeams_Players", "PlayersTeam")]
        public EntityCollection<PlayersTeam> PlayersTeams
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PlayersTeam>("FootballZoneModel.FK_PlayersTeams_Players", "PlayersTeam");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PlayersTeam>("FootballZoneModel.FK_PlayersTeams_Players", "PlayersTeam", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="FootballZoneModel", Name="PlayersTeam")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PlayersTeam : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new PlayersTeam object.
        /// </summary>
        /// <param name="playerID">Initial value of the PlayerID property.</param>
        /// <param name="teamID">Initial value of the TeamID property.</param>
        /// <param name="fromDate">Initial value of the FromDate property.</param>
        public static PlayersTeam CreatePlayersTeam(global::System.Int32 playerID, global::System.Int32 teamID, global::System.DateTime fromDate)
        {
            PlayersTeam playersTeam = new PlayersTeam();
            playersTeam.PlayerID = playerID;
            playersTeam.TeamID = teamID;
            playersTeam.FromDate = fromDate;
            return playersTeam;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PlayerID
        {
            get
            {
                return _PlayerID;
            }
            set
            {
                if (_PlayerID != value)
                {
                    OnPlayerIDChanging(value);
                    ReportPropertyChanging("PlayerID");
                    _PlayerID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PlayerID");
                    OnPlayerIDChanged();
                }
            }
        }
        private global::System.Int32 _PlayerID;
        partial void OnPlayerIDChanging(global::System.Int32 value);
        partial void OnPlayerIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TeamID
        {
            get
            {
                return _TeamID;
            }
            set
            {
                if (_TeamID != value)
                {
                    OnTeamIDChanging(value);
                    ReportPropertyChanging("TeamID");
                    _TeamID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TeamID");
                    OnTeamIDChanged();
                }
            }
        }
        private global::System.Int32 _TeamID;
        partial void OnTeamIDChanging(global::System.Int32 value);
        partial void OnTeamIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime FromDate
        {
            get
            {
                return _FromDate;
            }
            set
            {
                OnFromDateChanging(value);
                ReportPropertyChanging("FromDate");
                _FromDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FromDate");
                OnFromDateChanged();
            }
        }
        private global::System.DateTime _FromDate;
        partial void OnFromDateChanging(global::System.DateTime value);
        partial void OnFromDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ToDate
        {
            get
            {
                return _ToDate;
            }
            set
            {
                OnToDateChanging(value);
                ReportPropertyChanging("ToDate");
                _ToDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ToDate");
                OnToDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _ToDate;
        partial void OnToDateChanging(Nullable<global::System.DateTime> value);
        partial void OnToDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PlayerKind
        {
            get
            {
                return _PlayerKind;
            }
            set
            {
                OnPlayerKindChanging(value);
                ReportPropertyChanging("PlayerKind");
                _PlayerKind = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PlayerKind");
                OnPlayerKindChanged();
            }
        }
        private global::System.String _PlayerKind;
        partial void OnPlayerKindChanging(global::System.String value);
        partial void OnPlayerKindChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_PlayersTeams_Teams", "Teams")]
        public Team Team
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("FootballZoneModel.FK_PlayersTeams_Teams", "Teams").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("FootballZoneModel.FK_PlayersTeams_Teams", "Teams").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Team> TeamReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("FootballZoneModel.FK_PlayersTeams_Teams", "Teams");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Team>("FootballZoneModel.FK_PlayersTeams_Teams", "Teams", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_PlayersTeams_Players", "Player")]
        public Player Player
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Player>("FootballZoneModel.FK_PlayersTeams_Players", "Player").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Player>("FootballZoneModel.FK_PlayersTeams_Players", "Player").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Player> PlayerReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Player>("FootballZoneModel.FK_PlayersTeams_Players", "Player");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Player>("FootballZoneModel.FK_PlayersTeams_Players", "Player", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="FootballZoneModel", Name="Referee")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Referee : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Referee object.
        /// </summary>
        /// <param name="refereeID">Initial value of the RefereeID property.</param>
        public static Referee CreateReferee(global::System.Int32 refereeID)
        {
            Referee referee = new Referee();
            referee.RefereeID = refereeID;
            return referee;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RefereeID
        {
            get
            {
                return _RefereeID;
            }
            set
            {
                if (_RefereeID != value)
                {
                    OnRefereeIDChanging(value);
                    ReportPropertyChanging("RefereeID");
                    _RefereeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RefereeID");
                    OnRefereeIDChanged();
                }
            }
        }
        private global::System.Int32 _RefereeID;
        partial void OnRefereeIDChanging(global::System.Int32 value);
        partial void OnRefereeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String RefereeNames
        {
            get
            {
                return _RefereeNames;
            }
            set
            {
                OnRefereeNamesChanging(value);
                ReportPropertyChanging("RefereeNames");
                _RefereeNames = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("RefereeNames");
                OnRefereeNamesChanged();
            }
        }
        private global::System.String _RefereeNames;
        partial void OnRefereeNamesChanging(global::System.String value);
        partial void OnRefereeNamesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Biography
        {
            get
            {
                return _Biography;
            }
            set
            {
                OnBiographyChanging(value);
                ReportPropertyChanging("Biography");
                _Biography = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Biography");
                OnBiographyChanged();
            }
        }
        private global::System.String _Biography;
        partial void OnBiographyChanging(global::System.String value);
        partial void OnBiographyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ImageUrl
        {
            get
            {
                return _ImageUrl;
            }
            set
            {
                OnImageUrlChanging(value);
                ReportPropertyChanging("ImageUrl");
                _ImageUrl = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ImageUrl");
                OnImageUrlChanged();
            }
        }
        private global::System.String _ImageUrl;
        partial void OnImageUrlChanging(global::System.String value);
        partial void OnImageUrlChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_RefereesMatches_Referees", "RefereesMatches")]
        public EntityCollection<RefereesMatch> RefereesMatches
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RefereesMatch>("FootballZoneModel.FK_RefereesMatches_Referees", "RefereesMatches");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RefereesMatch>("FootballZoneModel.FK_RefereesMatches_Referees", "RefereesMatches", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="FootballZoneModel", Name="RefereesMatch")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RefereesMatch : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RefereesMatch object.
        /// </summary>
        /// <param name="refereeID">Initial value of the RefereeID property.</param>
        /// <param name="matchID">Initial value of the MatchID property.</param>
        public static RefereesMatch CreateRefereesMatch(global::System.Int32 refereeID, global::System.Int32 matchID)
        {
            RefereesMatch refereesMatch = new RefereesMatch();
            refereesMatch.RefereeID = refereeID;
            refereesMatch.MatchID = matchID;
            return refereesMatch;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RefereeID
        {
            get
            {
                return _RefereeID;
            }
            set
            {
                if (_RefereeID != value)
                {
                    OnRefereeIDChanging(value);
                    ReportPropertyChanging("RefereeID");
                    _RefereeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RefereeID");
                    OnRefereeIDChanged();
                }
            }
        }
        private global::System.Int32 _RefereeID;
        partial void OnRefereeIDChanging(global::System.Int32 value);
        partial void OnRefereeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MatchID
        {
            get
            {
                return _MatchID;
            }
            set
            {
                if (_MatchID != value)
                {
                    OnMatchIDChanging(value);
                    ReportPropertyChanging("MatchID");
                    _MatchID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("MatchID");
                    OnMatchIDChanged();
                }
            }
        }
        private global::System.Int32 _MatchID;
        partial void OnMatchIDChanging(global::System.Int32 value);
        partial void OnMatchIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String RefereeKind
        {
            get
            {
                return _RefereeKind;
            }
            set
            {
                OnRefereeKindChanging(value);
                ReportPropertyChanging("RefereeKind");
                _RefereeKind = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("RefereeKind");
                OnRefereeKindChanged();
            }
        }
        private global::System.String _RefereeKind;
        partial void OnRefereeKindChanging(global::System.String value);
        partial void OnRefereeKindChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_RefereesMatches_FootballMatches", "FootballMatches")]
        public FootballMatch FootballMatch
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FootballMatch>("FootballZoneModel.FK_RefereesMatches_FootballMatches", "FootballMatches").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FootballMatch>("FootballZoneModel.FK_RefereesMatches_FootballMatches", "FootballMatches").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<FootballMatch> FootballMatchReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FootballMatch>("FootballZoneModel.FK_RefereesMatches_FootballMatches", "FootballMatches");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<FootballMatch>("FootballZoneModel.FK_RefereesMatches_FootballMatches", "FootballMatches", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_RefereesMatches_Referees", "Referees")]
        public Referee Referee
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Referee>("FootballZoneModel.FK_RefereesMatches_Referees", "Referees").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Referee>("FootballZoneModel.FK_RefereesMatches_Referees", "Referees").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Referee> RefereeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Referee>("FootballZoneModel.FK_RefereesMatches_Referees", "Referees");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Referee>("FootballZoneModel.FK_RefereesMatches_Referees", "Referees", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="FootballZoneModel", Name="Sponsor")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Sponsor : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Sponsor object.
        /// </summary>
        /// <param name="sponsorID">Initial value of the SponsorID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Sponsor CreateSponsor(global::System.Int32 sponsorID, global::System.String name)
        {
            Sponsor sponsor = new Sponsor();
            sponsor.SponsorID = sponsorID;
            sponsor.Name = name;
            return sponsor;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SponsorID
        {
            get
            {
                return _SponsorID;
            }
            set
            {
                if (_SponsorID != value)
                {
                    OnSponsorIDChanging(value);
                    ReportPropertyChanging("SponsorID");
                    _SponsorID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SponsorID");
                    OnSponsorIDChanged();
                }
            }
        }
        private global::System.Int32 _SponsorID;
        partial void OnSponsorIDChanging(global::System.Int32 value);
        partial void OnSponsorIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Information
        {
            get
            {
                return _Information;
            }
            set
            {
                OnInformationChanging(value);
                ReportPropertyChanging("Information");
                _Information = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Information");
                OnInformationChanged();
            }
        }
        private global::System.String _Information;
        partial void OnInformationChanging(global::System.String value);
        partial void OnInformationChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ImageUrl
        {
            get
            {
                return _ImageUrl;
            }
            set
            {
                OnImageUrlChanging(value);
                ReportPropertyChanging("ImageUrl");
                _ImageUrl = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ImageUrl");
                OnImageUrlChanged();
            }
        }
        private global::System.String _ImageUrl;
        partial void OnImageUrlChanging(global::System.String value);
        partial void OnImageUrlChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_SponsorsTeams_Sponsors", "SponsorsTeam")]
        public EntityCollection<SponsorsTeam> SponsorsTeams
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SponsorsTeam>("FootballZoneModel.FK_SponsorsTeams_Sponsors", "SponsorsTeam");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SponsorsTeam>("FootballZoneModel.FK_SponsorsTeams_Sponsors", "SponsorsTeam", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="FootballZoneModel", Name="SponsorsTeam")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SponsorsTeam : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new SponsorsTeam object.
        /// </summary>
        /// <param name="sponsorID">Initial value of the SponsorID property.</param>
        /// <param name="teamID">Initial value of the TeamID property.</param>
        /// <param name="fromDate">Initial value of the FromDate property.</param>
        public static SponsorsTeam CreateSponsorsTeam(global::System.Int32 sponsorID, global::System.Int32 teamID, global::System.DateTime fromDate)
        {
            SponsorsTeam sponsorsTeam = new SponsorsTeam();
            sponsorsTeam.SponsorID = sponsorID;
            sponsorsTeam.TeamID = teamID;
            sponsorsTeam.FromDate = fromDate;
            return sponsorsTeam;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SponsorID
        {
            get
            {
                return _SponsorID;
            }
            set
            {
                if (_SponsorID != value)
                {
                    OnSponsorIDChanging(value);
                    ReportPropertyChanging("SponsorID");
                    _SponsorID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SponsorID");
                    OnSponsorIDChanged();
                }
            }
        }
        private global::System.Int32 _SponsorID;
        partial void OnSponsorIDChanging(global::System.Int32 value);
        partial void OnSponsorIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TeamID
        {
            get
            {
                return _TeamID;
            }
            set
            {
                if (_TeamID != value)
                {
                    OnTeamIDChanging(value);
                    ReportPropertyChanging("TeamID");
                    _TeamID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TeamID");
                    OnTeamIDChanged();
                }
            }
        }
        private global::System.Int32 _TeamID;
        partial void OnTeamIDChanging(global::System.Int32 value);
        partial void OnTeamIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime FromDate
        {
            get
            {
                return _FromDate;
            }
            set
            {
                OnFromDateChanging(value);
                ReportPropertyChanging("FromDate");
                _FromDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FromDate");
                OnFromDateChanged();
            }
        }
        private global::System.DateTime _FromDate;
        partial void OnFromDateChanging(global::System.DateTime value);
        partial void OnFromDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ToDate
        {
            get
            {
                return _ToDate;
            }
            set
            {
                OnToDateChanging(value);
                ReportPropertyChanging("ToDate");
                _ToDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ToDate");
                OnToDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _ToDate;
        partial void OnToDateChanging(Nullable<global::System.DateTime> value);
        partial void OnToDateChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_SponsorsTeams_Teams", "Teams")]
        public Team Team
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("FootballZoneModel.FK_SponsorsTeams_Teams", "Teams").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("FootballZoneModel.FK_SponsorsTeams_Teams", "Teams").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Team> TeamReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("FootballZoneModel.FK_SponsorsTeams_Teams", "Teams");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Team>("FootballZoneModel.FK_SponsorsTeams_Teams", "Teams", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_SponsorsTeams_Sponsors", "Sponsor")]
        public Sponsor Sponsor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Sponsor>("FootballZoneModel.FK_SponsorsTeams_Sponsors", "Sponsor").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Sponsor>("FootballZoneModel.FK_SponsorsTeams_Sponsors", "Sponsor").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Sponsor> SponsorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Sponsor>("FootballZoneModel.FK_SponsorsTeams_Sponsors", "Sponsor");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Sponsor>("FootballZoneModel.FK_SponsorsTeams_Sponsors", "Sponsor", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="FootballZoneModel", Name="Stadium")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Stadium : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Stadium object.
        /// </summary>
        /// <param name="stadiumID">Initial value of the StadiumID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Stadium CreateStadium(global::System.Int32 stadiumID, global::System.String name)
        {
            Stadium stadium = new Stadium();
            stadium.StadiumID = stadiumID;
            stadium.Name = name;
            return stadium;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StadiumID
        {
            get
            {
                return _StadiumID;
            }
            set
            {
                if (_StadiumID != value)
                {
                    OnStadiumIDChanging(value);
                    ReportPropertyChanging("StadiumID");
                    _StadiumID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("StadiumID");
                    OnStadiumIDChanged();
                }
            }
        }
        private global::System.Int32 _StadiumID;
        partial void OnStadiumIDChanging(global::System.Int32 value);
        partial void OnStadiumIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Information
        {
            get
            {
                return _Information;
            }
            set
            {
                OnInformationChanging(value);
                ReportPropertyChanging("Information");
                _Information = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Information");
                OnInformationChanged();
            }
        }
        private global::System.String _Information;
        partial void OnInformationChanging(global::System.String value);
        partial void OnInformationChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ImageUrl
        {
            get
            {
                return _ImageUrl;
            }
            set
            {
                OnImageUrlChanging(value);
                ReportPropertyChanging("ImageUrl");
                _ImageUrl = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ImageUrl");
                OnImageUrlChanged();
            }
        }
        private global::System.String _ImageUrl;
        partial void OnImageUrlChanging(global::System.String value);
        partial void OnImageUrlChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_StadiumsTeams_Stadiums", "StadiumsTeams")]
        public EntityCollection<StadiumsTeam> StadiumsTeams
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<StadiumsTeam>("FootballZoneModel.FK_StadiumsTeams_Stadiums", "StadiumsTeams");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<StadiumsTeam>("FootballZoneModel.FK_StadiumsTeams_Stadiums", "StadiumsTeams", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="FootballZoneModel", Name="StadiumsTeam")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class StadiumsTeam : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new StadiumsTeam object.
        /// </summary>
        /// <param name="stadiumID">Initial value of the StadiumID property.</param>
        /// <param name="teamID">Initial value of the TeamID property.</param>
        /// <param name="fromDate">Initial value of the FromDate property.</param>
        public static StadiumsTeam CreateStadiumsTeam(global::System.Int32 stadiumID, global::System.Int32 teamID, global::System.DateTime fromDate)
        {
            StadiumsTeam stadiumsTeam = new StadiumsTeam();
            stadiumsTeam.StadiumID = stadiumID;
            stadiumsTeam.TeamID = teamID;
            stadiumsTeam.FromDate = fromDate;
            return stadiumsTeam;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StadiumID
        {
            get
            {
                return _StadiumID;
            }
            set
            {
                if (_StadiumID != value)
                {
                    OnStadiumIDChanging(value);
                    ReportPropertyChanging("StadiumID");
                    _StadiumID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("StadiumID");
                    OnStadiumIDChanged();
                }
            }
        }
        private global::System.Int32 _StadiumID;
        partial void OnStadiumIDChanging(global::System.Int32 value);
        partial void OnStadiumIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TeamID
        {
            get
            {
                return _TeamID;
            }
            set
            {
                if (_TeamID != value)
                {
                    OnTeamIDChanging(value);
                    ReportPropertyChanging("TeamID");
                    _TeamID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TeamID");
                    OnTeamIDChanged();
                }
            }
        }
        private global::System.Int32 _TeamID;
        partial void OnTeamIDChanging(global::System.Int32 value);
        partial void OnTeamIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime FromDate
        {
            get
            {
                return _FromDate;
            }
            set
            {
                OnFromDateChanging(value);
                ReportPropertyChanging("FromDate");
                _FromDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FromDate");
                OnFromDateChanged();
            }
        }
        private global::System.DateTime _FromDate;
        partial void OnFromDateChanging(global::System.DateTime value);
        partial void OnFromDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ToDate
        {
            get
            {
                return _ToDate;
            }
            set
            {
                OnToDateChanging(value);
                ReportPropertyChanging("ToDate");
                _ToDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ToDate");
                OnToDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _ToDate;
        partial void OnToDateChanging(Nullable<global::System.DateTime> value);
        partial void OnToDateChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_StadiumsTeams_Stadiums", "Stadiums")]
        public Stadium Stadium
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Stadium>("FootballZoneModel.FK_StadiumsTeams_Stadiums", "Stadiums").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Stadium>("FootballZoneModel.FK_StadiumsTeams_Stadiums", "Stadiums").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Stadium> StadiumReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Stadium>("FootballZoneModel.FK_StadiumsTeams_Stadiums", "Stadiums");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Stadium>("FootballZoneModel.FK_StadiumsTeams_Stadiums", "Stadiums", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_StadiumsTeams_Teams", "Teams")]
        public Team Team
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("FootballZoneModel.FK_StadiumsTeams_Teams", "Teams").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("FootballZoneModel.FK_StadiumsTeams_Teams", "Teams").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Team> TeamReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("FootballZoneModel.FK_StadiumsTeams_Teams", "Teams");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Team>("FootballZoneModel.FK_StadiumsTeams_Teams", "Teams", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="FootballZoneModel", Name="Team")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Team : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Team object.
        /// </summary>
        /// <param name="teamID">Initial value of the TeamID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="countryID">Initial value of the CountryID property.</param>
        public static Team CreateTeam(global::System.Int32 teamID, global::System.String name, global::System.Int32 countryID)
        {
            Team team = new Team();
            team.TeamID = teamID;
            team.Name = name;
            team.CountryID = countryID;
            return team;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TeamID
        {
            get
            {
                return _TeamID;
            }
            set
            {
                if (_TeamID != value)
                {
                    OnTeamIDChanging(value);
                    ReportPropertyChanging("TeamID");
                    _TeamID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TeamID");
                    OnTeamIDChanged();
                }
            }
        }
        private global::System.Int32 _TeamID;
        partial void OnTeamIDChanging(global::System.Int32 value);
        partial void OnTeamIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Biography
        {
            get
            {
                return _Biography;
            }
            set
            {
                OnBiographyChanging(value);
                ReportPropertyChanging("Biography");
                _Biography = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Biography");
                OnBiographyChanged();
            }
        }
        private global::System.String _Biography;
        partial void OnBiographyChanging(global::System.String value);
        partial void OnBiographyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CountryID
        {
            get
            {
                return _CountryID;
            }
            set
            {
                OnCountryIDChanging(value);
                ReportPropertyChanging("CountryID");
                _CountryID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CountryID");
                OnCountryIDChanged();
            }
        }
        private global::System.Int32 _CountryID;
        partial void OnCountryIDChanging(global::System.Int32 value);
        partial void OnCountryIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ImageUrl
        {
            get
            {
                return _ImageUrl;
            }
            set
            {
                OnImageUrlChanging(value);
                ReportPropertyChanging("ImageUrl");
                _ImageUrl = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ImageUrl");
                OnImageUrlChanged();
            }
        }
        private global::System.String _ImageUrl;
        partial void OnImageUrlChanging(global::System.String value);
        partial void OnImageUrlChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_CoachesTeams_Teams", "CoachesTeams")]
        public EntityCollection<CoachesTeam> CoachesTeams
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CoachesTeam>("FootballZoneModel.FK_CoachesTeams_Teams", "CoachesTeams");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CoachesTeam>("FootballZoneModel.FK_CoachesTeams_Teams", "CoachesTeams", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_Teams_Countries", "Countries")]
        public Country Country
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("FootballZoneModel.FK_Teams_Countries", "Countries").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("FootballZoneModel.FK_Teams_Countries", "Countries").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Country> CountryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("FootballZoneModel.FK_Teams_Countries", "Countries");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Country>("FootballZoneModel.FK_Teams_Countries", "Countries", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_FootballMatches_Teams", "FootballMatches")]
        public EntityCollection<FootballMatch> FootballMatches
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<FootballMatch>("FootballZoneModel.FK_FootballMatches_Teams", "FootballMatches");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<FootballMatch>("FootballZoneModel.FK_FootballMatches_Teams", "FootballMatches", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_FootballMatches_Teams1", "FootballMatches")]
        public EntityCollection<FootballMatch> FootballMatches1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<FootballMatch>("FootballZoneModel.FK_FootballMatches_Teams1", "FootballMatches");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<FootballMatch>("FootballZoneModel.FK_FootballMatches_Teams1", "FootballMatches", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_OwnersTeams_Teams", "OwnersTeams")]
        public EntityCollection<OwnersTeam> OwnersTeams
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<OwnersTeam>("FootballZoneModel.FK_OwnersTeams_Teams", "OwnersTeams");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<OwnersTeam>("FootballZoneModel.FK_OwnersTeams_Teams", "OwnersTeams", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_PlayersTeams_Teams", "PlayersTeams")]
        public EntityCollection<PlayersTeam> PlayersTeams
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PlayersTeam>("FootballZoneModel.FK_PlayersTeams_Teams", "PlayersTeams");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PlayersTeam>("FootballZoneModel.FK_PlayersTeams_Teams", "PlayersTeams", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_SponsorsTeams_Teams", "SponsorsTeams")]
        public EntityCollection<SponsorsTeam> SponsorsTeams
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SponsorsTeam>("FootballZoneModel.FK_SponsorsTeams_Teams", "SponsorsTeams");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SponsorsTeam>("FootballZoneModel.FK_SponsorsTeams_Teams", "SponsorsTeams", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_StadiumsTeams_Teams", "StadiumsTeams")]
        public EntityCollection<StadiumsTeam> StadiumsTeams
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<StadiumsTeam>("FootballZoneModel.FK_StadiumsTeams_Teams", "StadiumsTeams");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<StadiumsTeam>("FootballZoneModel.FK_StadiumsTeams_Teams", "StadiumsTeams", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="FootballZoneModel", Name="Tournament")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Tournament : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Tournament object.
        /// </summary>
        /// <param name="tournamentID">Initial value of the TournamentID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Tournament CreateTournament(global::System.Int32 tournamentID, global::System.String name)
        {
            Tournament tournament = new Tournament();
            tournament.TournamentID = tournamentID;
            tournament.Name = name;
            return tournament;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TournamentID
        {
            get
            {
                return _TournamentID;
            }
            set
            {
                if (_TournamentID != value)
                {
                    OnTournamentIDChanging(value);
                    ReportPropertyChanging("TournamentID");
                    _TournamentID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TournamentID");
                    OnTournamentIDChanged();
                }
            }
        }
        private global::System.Int32 _TournamentID;
        partial void OnTournamentIDChanging(global::System.Int32 value);
        partial void OnTournamentIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Information
        {
            get
            {
                return _Information;
            }
            set
            {
                OnInformationChanging(value);
                ReportPropertyChanging("Information");
                _Information = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Information");
                OnInformationChanged();
            }
        }
        private global::System.String _Information;
        partial void OnInformationChanging(global::System.String value);
        partial void OnInformationChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> AssociationID
        {
            get
            {
                return _AssociationID;
            }
            set
            {
                OnAssociationIDChanging(value);
                ReportPropertyChanging("AssociationID");
                _AssociationID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AssociationID");
                OnAssociationIDChanged();
            }
        }
        private Nullable<global::System.Int32> _AssociationID;
        partial void OnAssociationIDChanging(Nullable<global::System.Int32> value);
        partial void OnAssociationIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ImageUrl
        {
            get
            {
                return _ImageUrl;
            }
            set
            {
                OnImageUrlChanging(value);
                ReportPropertyChanging("ImageUrl");
                _ImageUrl = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ImageUrl");
                OnImageUrlChanged();
            }
        }
        private global::System.String _ImageUrl;
        partial void OnImageUrlChanging(global::System.String value);
        partial void OnImageUrlChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_Tournaments_FootballAssociations", "FootballAssociation")]
        public FootballAssociation FootballAssociation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FootballAssociation>("FootballZoneModel.FK_Tournaments_FootballAssociations", "FootballAssociation").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FootballAssociation>("FootballZoneModel.FK_Tournaments_FootballAssociations", "FootballAssociation").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<FootballAssociation> FootballAssociationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FootballAssociation>("FootballZoneModel.FK_Tournaments_FootballAssociations", "FootballAssociation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<FootballAssociation>("FootballZoneModel.FK_Tournaments_FootballAssociations", "FootballAssociation", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FootballZoneModel", "FK_FootballMatches_Tournaments", "FootballMatch")]
        public EntityCollection<FootballMatch> FootballMatches
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<FootballMatch>("FootballZoneModel.FK_FootballMatches_Tournaments", "FootballMatch");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<FootballMatch>("FootballZoneModel.FK_FootballMatches_Tournaments", "FootballMatch", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
